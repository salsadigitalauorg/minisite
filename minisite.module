<?php

/**
 * @file minisite.module
 * Module file.
 */

define('MINISITE_UPLOADPATH', 'minisite/upload');
define('MINISITE_ASSETPATH', 'minisite/static');
define('MINISITE_EXTENSIONS_WHITELIST', 'html htm js css png jpg gif svg pdf doc docx ppt pptx xls xlsx tif xml txt woff woff2 ttf eot');
define('MINISITE_EXTENSIONS_BLACKLIST', 'exe scr bmp');
define('MINISITE_MAXFILESIZE', file_upload_max_size());
define('MINISITE_HASHSALT', 'minisite');

// Load all Field module hooks for Minisite.
require_once dirname(__FILE__) . '/includes/minisite.field.inc';
// Load all theme hooks for Minisite.
require_once dirname(__FILE__) . '/includes/minisite.theme.inc';

/**
 * Implements hook_help().
 */
function minisite_help($path, $arg) {
  switch ($path) {
    case 'admin/help#minisite':
      $output = '<p>' . t("Provides the ability to upload arbitrary 'minisites' to a Drupal website.") . '</p>';
      return $output;
  }
}

/**
 * Return minisite file extensions blacklist.
 * @return array
 */
function minisite_extensions_blacklist() {
  $extensions_blacklist =  &drupal_static(__FUNCTION__);

  if (!isset($extensions_blacklist)) {
    $extensions_blacklist = preg_replace('/([, ]+\.?)/', ' ', trim(strtolower(MINISITE_EXTENSIONS_BLACKLIST)));
    $extensions_blacklist = array_filter(explode(' ', $extensions_blacklist));
    $extensions_blacklist = array_unique($extensions_blacklist);
  }

  return $extensions_blacklist;
}

/**
 * Return minisite site path.
 * @param \stdClass $file
 * @return array
 */
function minisite_site_path(stdClass $file) {
  if (!empty($file)) {
    return FALSE;
  }

  $minisite_hash = minisite_site_hash($file->filename);
  $minisite_path = MINISITE_ASSETPATH . '/' . $minisite_hash;

  $archive = MinisiteArchive::open($file);
  $tree = $archive->filesTree();
  // Ignore __MACOSX folder.
  unset($tree['__MACOSX']);

  $root_files = array_keys($tree);
  $top_folder = $root_files[0];

  return array(
    $archive,
    $minisite_path,
    $minisite_path . '/' . $top_folder . '/',
  );
}

/**
 * Generate minisite site hash.
 * @param $data
 * @return string
 */
function minisite_site_hash($data) {
  return drupal_hmac_base64($data, MINISITE_HASHSALT);
}
